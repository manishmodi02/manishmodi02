{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { Container, Title, ListContainer, Grid, CardContainer, Poster, PosterContainer, IconContainer, RatingsContainer, Ratings, StarsContainer } from './Home.styles';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport StarIcon from '@material-ui/icons/Star';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nexport const useMovies = () => {\n  const {\n    0: movies,\n    1: setMovies\n  } = useState([]);\n  useEffect(() => {\n    fetchMovies();\n  }, []);\n\n  const fetchMovies = async () => {\n    try {\n      const response = await fetch('http://localhost:3333/api/movies');\n      const data = await response.json();\n\n      if (data.length) {\n        setMovies(data);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const updateMovieState = async (movieId, body) => {\n    try {\n      const response = await fetch(`http://localhost:3333/api/movies/id/${movieId}`, {\n        method: 'PUT',\n        headers: {\n          accept: '*/*',\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: `saved=${body.saved}&watched=${body.watched}`\n      });\n\n      if (response.status === 200) {\n        fetchMovies();\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return {\n    movies,\n    updateMovieState\n  };\n};\n\nconst StarRatings = ({\n  ratings = 0\n}) => {\n  const starsArray = Array.from({\n    length: 5\n  });\n  return __jsx(StarsContainer, null, starsArray.map((i, index) => index >= Math.floor(ratings / 2) ? __jsx(StarBorderIcon, {\n    key: `${i}-${index}`\n  }) : __jsx(StarIcon, {\n    key: `${i}-${index}`\n  })));\n};\n\nexport const MovieCard = ({\n  movie,\n  index,\n  updateMovieState\n}) => {\n  const EyeIcon = useMemo(() => movie.Watched === 'True' ? VisibilityIcon : VisibilityOffIcon, [movie.Watched]);\n  const HeartIcon = useMemo(() => movie.Saved === 'True' ? FavoriteIcon : FavoriteBorderIcon, [movie.Saved]);\n  return __jsx(CardContainer, {\n    key: `${movie.imdbID}-${index}`\n  }, __jsx(IconContainer, null, __jsx(\"div\", {\n    \"data-testid\": \"view-btn-div\",\n    onClick: () => updateMovieState(movie.imdbID, {\n      watched: movie.Watched !== 'True',\n      saved: movie.Saved !== 'True'\n    })\n  }, __jsx(EyeIcon, null)), __jsx(\"div\", {\n    \"data-testid\": \"like-btn-div\"\n  }, \"onClick=\", () => updateMovieState(movie.imdbID, {\n    watched: movie.Watched !== 'True',\n    saved: movie.Saved !== 'True'\n  }), __jsx(HeartIcon, null))), __jsx(PosterContainer, null, __jsx(Poster, {\n    src: movie.Poster\n  })), __jsx(RatingsContainer, {\n    \"data-testid\": \"rating-container\"\n  }, __jsx(Ratings, null, `(${movie.imdbRating})`), __jsx(StarRatings, {\n    ratings: Number(movie.imdbRating)\n  })));\n};\n\nconst Home = () => {\n  const {\n    movies,\n    updateMovieState\n  } = useMovies();\n  return __jsx(Container, null, __jsx(Title, {\n    \"data-testid\": \"count-title\"\n  }, \"Movies \", `(${movies.length})`), __jsx(ListContainer, null, __jsx(Grid, null, movies.map((movie, index) => __jsx(MovieCard, {\n    \"data-testid\": \"MovieCard-element\",\n    movie: movie,\n    updateMovieState: updateMovieState,\n    index: index\n  })))));\n};\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/ManishModi/Downloads/WTC/apps/fe-wtc-tech-test/pages/home/index.tsx"],"names":["useMovies","setMovies","useState","useEffect","fetchMovies","response","fetch","data","console","updateMovieState","movieId","method","headers","accept","body","saved","watched","StarRatings","ratings","starsArray","length","Math","i","index","MovieCard","EyeIcon","useMemo","movie","HeartIcon","imdbID","Poster","imdbRating","Number","Home","movies"],"mappings":"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","sourcesContent":["import React, { FC, useEffect, useMemo, useState } from 'react';\n\nimport { Movie } from 'apps/fe-wtc-tech-test/types/movie';\nimport {\n  Container,\n  Title,\n  ListContainer,\n  Grid,\n  CardContainer,\n  Poster,\n  PosterContainer,\n  IconContainer,\n  RatingsContainer,\n  Ratings,\n  StarsContainer,\n} from './Home.styles';\n\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport StarIcon from '@material-ui/icons/Star';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\n\nexport const useMovies = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  useEffect(() => {\n    fetchMovies();\n  }, []);\n  const fetchMovies = async () => {\n    try {\n      const response = await fetch('http://localhost:3333/api/movies');\n\n      const data: Movie[] = await response.json();\n\n      if (data.length) {\n        setMovies(data);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const updateMovieState = async (movieId, body) => {\n    try {\n      const response = await fetch(\n        `http://localhost:3333/api/movies/id/${movieId}`,\n        {\n          method: 'PUT',\n          headers: {\n            accept: '*/*',\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n          body: `saved=${body.saved}&watched=${body.watched}`,\n        }\n      );\n\n      if (response.status === 200) {\n        fetchMovies();\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return {\n    movies,\n    updateMovieState,\n  };\n};\n\nconst StarRatings: FC<{ ratings: number }> = ({ ratings = 0 }) => {\n  const starsArray = Array.from({ length: 5 });\n\n  return (\n    <StarsContainer>\n      {starsArray.map((i, index) =>\n        index >= Math.floor(ratings / 2) ? (\n          <StarBorderIcon key={`${i}-${index}`} />\n        ) : (\n          <StarIcon key={`${i}-${index}`} />\n        )\n      )}\n    </StarsContainer>\n  );\n};\n\ntype MovieCardProps = {\n  movie: Movie;\n  index: number;\n  updateMovieState: (movieId: string, body: object) => void;\n};\n\nexport const MovieCard: FC<MovieCardProps> = ({\n  movie,\n  index,\n  updateMovieState,\n}) => {\n  const EyeIcon = useMemo(\n    () => (movie.Watched === 'True' ? VisibilityIcon : VisibilityOffIcon),\n    [movie.Watched]\n  );\n\n  const HeartIcon = useMemo(\n    () => (movie.Saved === 'True' ? FavoriteIcon : FavoriteBorderIcon),\n    [movie.Saved]\n  );\n\n  return (\n    <CardContainer key={`${movie.imdbID}-${index}`}>\n      <IconContainer>\n        <div\n          data-testid=\"view-btn-div\"\n          onClick={() =>\n            updateMovieState(movie.imdbID, {\n              watched: movie.Watched !== 'True',\n              saved: movie.Saved !== 'True',\n            })\n          }\n        >\n          <EyeIcon />\n        </div>\n        <div data-testid=\"like-btn-div\">\n          onClick={() =>\n            updateMovieState(movie.imdbID, {\n              watched: movie.Watched !== 'True',\n              saved: movie.Saved !== 'True',\n            })\n          }\n          <HeartIcon />\n        </div>\n      </IconContainer>\n      <PosterContainer>\n        <Poster src={movie.Poster} />\n      </PosterContainer>\n      <RatingsContainer data-testid=\"rating-container\">\n        <Ratings>{`(${movie.imdbRating})`}</Ratings>\n        <StarRatings ratings={Number(movie.imdbRating)} />\n      </RatingsContainer>\n    </CardContainer>\n  );\n};\n\nconst Home: FC = () => {\n  const { movies, updateMovieState } = useMovies();\n\n  return (\n    <Container>\n      <Title data-testid=\"count-title\">Movies {`(${movies.length})`}</Title>\n      <ListContainer>\n        <Grid>\n          {movies.map((movie, index) => (\n            <MovieCard\n              data-testid=\"MovieCard-element\"\n              movie={movie}\n              updateMovieState={updateMovieState}\n              index={index}\n            />\n          ))}\n        </Grid>\n      </ListContainer>\n    </Container>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}