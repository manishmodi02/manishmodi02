{"ast":null,"code":"var _s2 = $RefreshSig$();\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Checkbox from '@material-ui/core/Checkbox';\nvar useStyles = makeStyles({\n  root: {\n    '&:hover': {\n      backgroundColor: 'transparent'\n    }\n  },\n  icon: {\n    borderRadius: 3,\n    width: 17,\n    height: 17,\n    boxShadow: 'inset 0 0 0 1px rgba(16,22,26,.2), inset 0 -1px 0 rgba(16,22,26,.1)',\n    backgroundColor: '#f5f8fa',\n    'input:hover ~ &': {\n      backgroundColor: '#ebf1f5'\n    },\n    'input:disabled ~ &': {\n      boxShadow: 'none',\n      background: 'rgba(206,217,224,.5)'\n    }\n  },\n  checkedIcon: {\n    boxShadow: 'none',\n    '&:before': {\n      display: 'block',\n      width: 17,\n      height: 17,\n      border: '1px solid blue',\n      borderRadius: '3px',\n      backgroundImage: \"url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath\" + \" fill-rule='evenodd' clip-rule='evenodd' d='M12 5c-.28 0-.53.11-.71.29L7 9.59l-2.29-2.3a1.003 \" + \"1.003 0 00-1.42 1.42l3 3c.18.18.43.29.71.29s.53-.11.71-.29l5-5A1.003 1.003 0 0012 5z' fill='%231B63DC'/%3E%3C/svg%3E\\\")\",\n      content: '\"\"'\n    },\n    'input:hover ~ &': {\n      backgroundColor: 'white'\n    }\n  }\n});\n\nvar CheckboxIcon = function CheckboxIcon(props) {\n  _s2();\n\n  _s();\n\n  var classes = useStyles();\n  return __jsx(Checkbox, _extends({\n    className: classes.root,\n    disableRipple: true,\n    color: \"default\",\n    checkedIcon: __jsx(\"span\", {\n      className: clsx(classes.icon, classes.checkedIcon)\n    }),\n    icon: __jsx(\"span\", {\n      className: classes.icon\n    }),\n    inputProps: {\n      'aria-label': 'decorative checkbox'\n    }\n  }, props));\n};\n\n_s2(CheckboxIcon, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c2 = CheckboxIcon;\n\n_s(CheckboxIcon, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = CheckboxIcon;\nexport default CheckboxIcon;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckboxIcon\");\n;\n\nvar _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n// to extract CSS. For backwards compatibility, we need to check we're in a\n// browser context before continuing.\n\n\nif (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n'$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n  // templating and execution.\n\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id); // A module can be accepted automatically based on its exports, e.g. when\n  // it is a Refresh Boundary.\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    // Save the previous exports on update so we can compare the boundary\n    // signatures.\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    }); // Unconditionally accept an update to this module, we'll check if it's\n    // still a Refresh Boundary later.\n\n    module.hot.accept(); // This field is set when the previous version of this module was a\n    // Refresh Boundary, letting us know we need to check for invalidation or\n    // enqueue an update.\n\n    if (prevExports !== null) {\n      // A boundary can become ineligible if its exports are incompatible\n      // with the previous exports.\n      //\n      // For example, if you add/remove/change exports, we'll want to\n      // re-execute the importing modules, and force those components to\n      // re-render. Similarly, if you convert a class component to a\n      // function, we want to invalidate the boundary.\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    // Since we just executed the code for the module, it's possible that the\n    // new exports made it ineligible for being a boundary.\n    // We only care about the case when we were _previously_ a boundary,\n    // because we already accepted this update (accidental side effect).\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}\n\nvar _c2;\n\n$RefreshReg$(_c2, \"CheckboxIcon\");","map":{"version":3,"sources":["C:/Users/ManishModi/Downloads/WTC/apps/fe-wtc-tech-test/app/components/filterItem/checkboxIcon/index.tsx"],"names":["useStyles","makeStyles","root","backgroundColor","icon","borderRadius","width","height","boxShadow","background","checkedIcon","display","border","backgroundImage","content","CheckboxIcon","classes","clsx"],"mappings":";;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,IAAA,MAAA,MAAA;AACA,SAAA,UAAA,QAAA,0BAAA;AACA,OAAA,QAAA,MAAA,4BAAA;AAEA,IAAMA,SAAS,GAAGC,UAAU,CAAC;AAC3BC,EAAAA,IAAI,EAAE;AACJ,eAAW;AACTC,MAAAA,eAAe,EAAE;AADR;AADP,GADqB;AAM3BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,YAAY,EADR,CAAA;AAEJC,IAAAA,KAAK,EAFD,EAAA;AAGJC,IAAAA,MAAM,EAHF,EAAA;AAIJC,IAAAA,SAAS,EAJL,qEAAA;AAMJL,IAAAA,eAAe,EANX,SAAA;AAOJ,uBAAmB;AACjBA,MAAAA,eAAe,EAAE;AADA,KAPf;AAUJ,0BAAsB;AACpBK,MAAAA,SAAS,EADW,MAAA;AAEpBC,MAAAA,UAAU,EAAE;AAFQ;AAVlB,GANqB;AAqB3BC,EAAAA,WAAW,EAAE;AACXF,IAAAA,SAAS,EADE,MAAA;AAEX,gBAAY;AACVG,MAAAA,OAAO,EADG,OAAA;AAEVL,MAAAA,KAAK,EAFK,EAAA;AAGVC,MAAAA,MAAM,EAHI,EAAA;AAIVK,MAAAA,MAAM,EAJI,gBAAA;AAKVP,MAAAA,YAAY,EALF,KAAA;AAMVQ,MAAAA,eAAe,EACb,mHAAA,gGAAA,GAPQ,yHAAA;AAUVC,MAAAA,OAAO,EAAE;AAVC,KAFD;AAcX,uBAAmB;AACjBX,MAAAA,eAAe,EAAE;AADA;AAdR;AArBc,CAAD,CAA5B;;AAyCA,IAAMY,YAAY,GAAG,SAAfA,YAAe,CAAA,KAAA,EAA0B;AAAA;;AAAA,EAAA,EAAA;;AAC7C,MAAMC,OAAO,GAAGhB,SAAhB,EAAA;AAEA,SACE,KAAA,CAAA,QAAA,EAAA,QAAA,CAAA;AACE,IAAA,SAAS,EAAEgB,OAAO,CADpB,IAAA;AAEE,IAAA,aAAa,EAFf,IAAA;AAGE,IAAA,KAAK,EAHP,SAAA;AAIE,IAAA,WAAW,EAAE,KAAA,CAAA,MAAA,EAAA;AAAM,MAAA,SAAS,EAAEC,IAAI,CAACD,OAAO,CAAR,IAAA,EAAeA,OAAO,CAAtB,WAAA;AAArB,KAAA,CAJf;AAKE,IAAA,IAAI,EAAE,KAAA,CAAA,MAAA,EAAA;AAAM,MAAA,SAAS,EAAEA,OAAO,CAACZ;AAAzB,KAAA,CALR;AAME,IAAA,UAAU,EAAE;AAAE,oBAAc;AAAhB;AANd,GAAA,EADF,KACE,CAAA,CADF;AAHF,CAAA;;IAAMW,Y;UACYf,S;;;MADZe,Y;;GAAAA,Y;UACYf,S;;;KADZe,Y;AAgBN,eAAA,YAAA","sourcesContent":["import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    '&:hover': {\r\n      backgroundColor: 'transparent',\r\n    },\r\n  },\r\n  icon: {\r\n    borderRadius: 3,\r\n    width: 17,\r\n    height: 17,\r\n    boxShadow:\r\n      'inset 0 0 0 1px rgba(16,22,26,.2), inset 0 -1px 0 rgba(16,22,26,.1)',\r\n    backgroundColor: '#f5f8fa',\r\n    'input:hover ~ &': {\r\n      backgroundColor: '#ebf1f5',\r\n    },\r\n    'input:disabled ~ &': {\r\n      boxShadow: 'none',\r\n      background: 'rgba(206,217,224,.5)',\r\n    },\r\n  },\r\n  checkedIcon: {\r\n    boxShadow: 'none',\r\n    '&:before': {\r\n      display: 'block',\r\n      width: 17,\r\n      height: 17,\r\n      border: '1px solid blue',\r\n      borderRadius: '3px',\r\n      backgroundImage:\r\n        \"url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath\" +\r\n        \" fill-rule='evenodd' clip-rule='evenodd' d='M12 5c-.28 0-.53.11-.71.29L7 9.59l-2.29-2.3a1.003 \" +\r\n        \"1.003 0 00-1.42 1.42l3 3c.18.18.43.29.71.29s.53-.11.71-.29l5-5A1.003 1.003 0 0012 5z' fill='%231B63DC'/%3E%3C/svg%3E\\\")\",\r\n      content: '\"\"',\r\n    },\r\n    'input:hover ~ &': {\r\n      backgroundColor: 'white',\r\n    },\r\n  },\r\n});\r\n\r\nconst CheckboxIcon = (props: CheckboxProps) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Checkbox\r\n      className={classes.root}\r\n      disableRipple\r\n      color=\"default\"\r\n      checkedIcon={<span className={clsx(classes.icon, classes.checkedIcon)} />}\r\n      icon={<span className={classes.icon} />}\r\n      inputProps={{ 'aria-label': 'decorative checkbox' }}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CheckboxIcon;\r\n"]},"metadata":{},"sourceType":"module"}