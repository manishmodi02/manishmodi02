{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { CardContainer, Poster, PosterContainer, IconContainer, RatingsContainer, Ratings, StarsContainer } from './Home.styles';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport StarIcon from '@material-ui/icons/Star';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\n/*\nCustom Hook useMovies\nreturns\nlist of movies and\nupdated state of the watched and saved variabl\n*/\n\nexport const useMovies = () => {\n  const {\n    0: movies,\n    1: setMovies\n  } = useState([]);\n  /* side-effect */\n\n  useEffect(() => {\n    fetchMovies();\n  }, []);\n  /* fetches movies */\n\n  const fetchMovies = async () => {\n    try {\n      const response = await fetch('http://localhost:3333/api/movies');\n      const data = await response.json();\n\n      if (data.length) {\n        setMovies(data);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  /* updates the state of the movie */\n\n\n  const updateMovieState = async (movieId, body) => {\n    try {\n      const response = await fetch(`http://localhost:3333/api/movies/id/${movieId}`, {\n        method: 'PUT',\n        headers: {\n          accept: '*/*',\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: `saved=${body.saved}&watched=${body.watched}`\n      });\n\n      if (response.status === 200) {\n        fetchMovies();\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return {\n    movies,\n    updateMovieState\n  };\n};\n/* calculates the star ratings of a movie */\n\nconst StarRatings = ({\n  ratings = 0\n}) => {\n  const starsArray = Array.from({\n    length: 5\n  });\n  return __jsx(StarsContainer, null, starsArray.map((i, index) => index >= Math.floor(ratings / 2) ? __jsx(StarBorderIcon, {\n    key: `${i}-${index}`\n  }) : __jsx(StarIcon, {\n    key: `${i}-${index}`\n  })));\n};\n/* interface */\n\n\n/* Movie Card Component */\nexport const MovieCard = ({\n  movie,\n  index,\n  updateMovieState\n}) => {\n  const EyeIcon = useMemo(() => movie.Watched === 'True' ? VisibilityIcon : VisibilityOffIcon, [movie.Watched]);\n  const HeartIcon = useMemo(() => movie.Saved === 'True' ? FavoriteIcon : FavoriteBorderIcon, [movie.Saved]);\n  return __jsx(CardContainer, {\n    key: `${movie.imdbID}-${index}`\n  }, __jsx(IconContainer, null, __jsx(\"div\", {\n    \"data-testid\": \"view-btn-div\",\n    onClick: () => updateMovieState(movie.imdbID, {\n      watched: movie.Watched !== 'True',\n      saved: movie.Saved\n    })\n  }, __jsx(EyeIcon, null)), __jsx(\"div\", {\n    \"data-testid\": \"like-btn-div\",\n    onClick: () => updateMovieState(movie.imdbID, {\n      saved: movie.Saved !== 'True'\n    })\n  }, __jsx(HeartIcon, null))), __jsx(PosterContainer, null, __jsx(Poster, {\n    src: movie.Poster\n  })), __jsx(RatingsContainer, {\n    \"data-testid\": \"rating-container\"\n  }, __jsx(Ratings, null, `(${movie.imdbRating})`), __jsx(StarRatings, {\n    ratings: Number(movie.imdbRating)\n  })));\n};","map":{"version":3,"sources":["C:/Users/ManishModi/Downloads/WTC/apps/fe-wtc-tech-test/pages/home/index.tsx"],"names":["React","useEffect","useMemo","useState","CardContainer","Poster","PosterContainer","IconContainer","RatingsContainer","Ratings","StarsContainer","VisibilityIcon","FavoriteBorderIcon","FavoriteIcon","VisibilityOffIcon","StarIcon","StarBorderIcon","useMovies","movies","setMovies","fetchMovies","response","fetch","data","json","length","error","console","log","updateMovieState","movieId","body","method","headers","accept","saved","watched","status","StarRatings","ratings","starsArray","Array","from","map","i","index","Math","floor","MovieCard","movie","EyeIcon","Watched","HeartIcon","Saved","imdbID","imdbRating","Number"],"mappings":"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","sourcesContent":["import React, { FC, useEffect, useMemo, useState } from 'react';\nimport { Movie } from 'apps/fe-wtc-tech-test/types/movie';\nimport {\n  CardContainer,\n  Poster,\n  PosterContainer,\n  IconContainer,\n  RatingsContainer,\n  Ratings,\n  StarsContainer,\n} from './Home.styles';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport StarIcon from '@material-ui/icons/Star';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\n/*\nCustom Hook useMovies\nreturns\nlist of movies and\nupdated state of the watched and saved variabl\n*/\nexport const useMovies = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  /* side-effect */\n  useEffect(() => {\n    fetchMovies();\n  }, []);\n\n  /* fetches movies */\n  const fetchMovies = async () => {\n    try {\n      const response = await fetch('http://localhost:3333/api/movies');\n\n      const data: Movie[] = await response.json();\n\n      if (data.length) {\n        setMovies(data);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  /* updates the state of the movie */\n  const updateMovieState = async (movieId, body) => {\n    try {\n      const response = await fetch(\n        `http://localhost:3333/api/movies/id/${movieId}`,\n        {\n          method: 'PUT',\n          headers: {\n            accept: '*/*',\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n          body: `saved=${body.saved}&watched=${body.watched}`,\n        }\n      );\n\n      if (response.status === 200) {\n        fetchMovies();\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return {\n    movies,\n    updateMovieState,\n  };\n};\n\n/* calculates the star ratings of a movie */\nconst StarRatings: FC<{ ratings: number }> = ({ ratings = 0 }) => {\n  const starsArray = Array.from({ length: 5 });\n\n  return (\n    <StarsContainer>\n      {starsArray.map((i, index) =>\n        index >= Math.floor(ratings / 2) ? (\n          <StarBorderIcon key={`${i}-${index}`} />\n        ) : (\n          <StarIcon key={`${i}-${index}`} />\n        )\n      )}\n    </StarsContainer>\n  );\n};\n\n/* interface */\ntype MovieCardProps = {\n  movie: Movie;\n  index: number;\n  updateMovieState: (movieId: string, body: object) => void;\n};\n/* Movie Card Component */\nexport const MovieCard: FC<MovieCardProps> = ({\n  movie,\n  index,\n  updateMovieState,\n}) => {\n  const EyeIcon = useMemo(\n    () => (movie.Watched === 'True' ? VisibilityIcon : VisibilityOffIcon),\n    [movie.Watched]\n  );\n\n  const HeartIcon = useMemo(\n    () => (movie.Saved === 'True' ? FavoriteIcon : FavoriteBorderIcon),\n    [movie.Saved]\n  );\n\n  return (\n    <CardContainer key={`${movie.imdbID}-${index}`}>\n      <IconContainer>\n        <div\n          data-testid=\"view-btn-div\"\n          onClick={() =>\n            updateMovieState(movie.imdbID, {\n              watched: movie.Watched !== 'True',\n              saved: movie.Saved\n            })\n          }\n        >\n          <EyeIcon />\n        </div>\n        <div data-testid=\"like-btn-div\"\n          onClick={() =>\n            updateMovieState(movie.imdbID, {\n              saved: movie.Saved !== 'True'\n            })\n          }\n        >\n          <HeartIcon />\n        </div>\n      </IconContainer>\n      <PosterContainer>\n        <Poster src={movie.Poster} />\n      </PosterContainer>\n      <RatingsContainer data-testid=\"rating-container\">\n        <Ratings>{`(${movie.imdbRating})`}</Ratings>\n        <StarRatings ratings={Number(movie.imdbRating)} />\n      </RatingsContainer>\n    </CardContainer>\n  );\n};\n\n\n"]},"metadata":{},"sourceType":"module"}